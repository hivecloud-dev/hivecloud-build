<project name="hivelog-cte" basedir="../../">

	<!-- adiciona o ant-contrib, biblioteca que disponibiliza diversos comando adicionais ao ant -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"
			 classpath="${user.home}/.m2/repository/ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.jar"/>

	<!-- Propriedades do Build runtime-->
	<property name="build.projeto" value="${env.PROJETO}"/>
	<property name="build.acao" value="${env.ACAO}"/>
	<property name="build.pastaArtefato" value="${env.PASTAARTEFATO}"/>
	<property name="build.id" value="${env.CODEBUILD_BUILD_ID}"/>
	<property name="build.source" value="${env.CODEBUILD_SOURCE_VERSION}"/>
	<property name="build.tstamp" value="${env.CODEBUILD_START_TIME}"/>

	<target name = "do-magic" description="metodo inicial">

		<echo>${build.projeto}</echo>
		<echo>${build.acao}</echo>
		<echo>${build.pastaArtefato}</echo>
		<echo>${build.id}</echo>
		<echo>${build.source}</echo>
		<echo>${build.tstamp}</echo>

		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="dir"/>
		</exec>

		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="dir ${build.pastaArtefato}"/>
		</exec>

		<fail>Tem que falhar, se nao vou precisar rodar o build todas as vezes</fail>

	</target>


	<target name="deploy-war-application"
			description="Coloca o artefato WAR gerado no Application Version do Elastick Beanstalk">

		<exec executable="/bin/sh" outputproperty ="pom.version" failonerror="true">
			<arg value="-c" />
			<arg value="grep -o -i -m 1 -E &quot;&lt;version&gt;.*&lt;\/version&gt;&quot; pom.xml | cut -d\&gt; -f2 | cut -d\&lt; -f1"/>
		</exec>

		<property name="application.description" value="RELEASE ${pom.version}" />
		<property name="deploy.s3.warName" value="${project.name}/${build.number}.war" />

		<create-application-version
				localPath="${project.warPath}"
				s3Name="${deploy.s3.warName}"
				description="${application.description}"
				versionLabel="${application.versionLabel}" />

	</target>




	<!--propriedades gerais -->
	<property environment="env"/>
	<loadproperties srcFile="./.aws/app-versions.properties" />
	<loadproperties srcFile="./.aws/environment.properties" />

	<!-- Propriedades estaticas, aquelas que não dependem do projeto-->
	<property name="maven.repositories" value="com.hivecloud.mvnrepo::default::s3://mvnrepo.hivecloud.com.br"/>
	<property name="application.repositoryPath" value="${user.home}/.m2/repository/com/hivelog" />
	<property name="multiwar.dir" value="../target/multiwar" />
	<property name="multiwar.dir.war.dir" value="${multiwar.dir}/war" />


	<!-- propriedades customizaveis -->
	<property name="project.nickname" value="cte" />
	<property name="project.name" value="hivelog-cte" />
	<property name="project.warName" value="${cte.warName}" />
	<property name="project.version" value="${cte.version}" />
	<property name="project.warPath" value="target/${project.name}.war" />
	<property name="project.multiWarPath" value="target/${project.name}-multiwar.zip" />


	<!-- parece errado, porem funciona (@_@) -->
	<exec executable="/bin/sh" outputproperty ="build.number">
		<arg value="-c" />
		<arg value="echo ${build.id} | cut -d: -f2" />
	</exec>
	<property name="application.versionLabel" value="${build.number}" />

	<!-- propriedades pro deploy -->
	<property name="deploy.s3.bucket" value="app-deploy"/>

	<!-- Multiwar -->
	<property name="multiwar.projects" value="tms,mdfe,edi,accounts,cas,rpa,services,dynamo,sqs" />

	<!-- propriedades referentes ao banco -->
	<propertycopy property="sql.host" from="environment.${build.server}.db.host" />
	<propertycopy property="sql.user" from="environment.${build.server}.db.user" />
	<propertycopy property="sql.password" from="environment.${build.server}.db.password" />
	<propertycopy property="sql.dbname" from="environment.${build.server}.db.dbname" />

	<property name="sql.data.path" value="${basedir}/src/test/resources/database-testdata/test-data.sql"/>
	<property name="sql.config.path" value="${basedir}/src/test/resources/database-testdata/config-${build.server}.sql"/>
	<property name="sql.update.path" value="${basedir}/src/main/resources/database/update-data.sql"/>


	<!-- propriedades pra subir o servidor -->
	<propertycopy property="environment.cname" from="environment.${build.server}.eb.cname" />
	<propertycopy property="environment.name" from="environment.${build.server}.eb.environmentName" />
	<propertycopy property="environment.template" from="environment.${build.server}.eb.templateName" />

	<target name="package" description="Compila o projeto">
		<antcall target="-mvn-package"/>
	</target>

	<target name="package-multiwar" description="Compila o projeto e gera o multiwar">
		<antcall target="-mvn-package"/>
		<antcall target="-multiwar-package"/>
	</target>

	<target name="snapshot" description="gera p snapshot da aplicacao">
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="mvn clean deploy -U -Denvironment.type=production" />
		</exec>
	</target>

	<target name="deploy-multiwar-application"
			description="Coloca o artefato MULTIWAR gerado no Application Version do Elastick Beanstalk">

		<property name="application.description" value="Branch ${build.source}" />
		<property name="deploy.s3.multiwarName" value="${project.name}/${build.number}.zip" />

		<create-application-version
				localPath="${project.multiWarPath}"
				s3Name="${deploy.s3.multiwarName}"
				description="${application.description}"
				versionLabel="${application.versionLabel}" />

	</target>

	<target name="start-server" description="Cria ou atualiza o servidor selecionado">

		<echo>Application Label ${application.versionLabel}</echo>
		<antcallback target="-check-environment" return="server.color" />

		<if>
			<equals arg1="${server.color}" arg2="" />
			<then>
				<antcall target="-create-environment"/>
			</then>
			<else>
				<if>
					<equals arg1="${server.color}" arg2="Terminated" />
					<then>
						<antcall target="-create-environment"/>
					</then>
					<else>
						<antcall target="-update-environment"/>
					</else>
				</if>
			</else>
		</if>

	</target>

	<target name="reload-database"
			description="Recria a base de dados baseado no update do codigo e no test-data">
		<antcall target="-database-reload"/>
		<antcall target="-database-update"/>
	</target>

	<target name="export-database"
			description="Exporta a base de dados para o test-data">
		<antcall target="-database-export"/>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="git status" />
		</exec>
		<echo>ADD</echo>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="git add --all" />
		</exec>
		<echo>COMMIT</echo>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="git commit -m '[${pom.version}]: Export dos dados da base ${build.server}'" />
		</exec>
		<echo>PUSH</echo>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="git push" />
		</exec>

	</target>

	<target name="release-version-start"
			description="Inicia a geração de versão">

		<if>
			<equals arg1="${build.nextversion}" arg2="" />
			<then>
				<exec executable="/bin/sh" failonerror="true">
					<arg value="-c" />
					<arg value="mvn --batch-mode jgitflow:release-start " />
				</exec>
			</then>
			<else>
				<exec executable="/bin/sh" failonerror="true">
					<arg value="-c" />
					<arg value="mvn --batch-mode jgitflow:release-start -DdevelopmentVersion=${build.nextversion} " />
				</exec>
			</else>
		</if>
	</target>

	<target name="release-version-database-update"
			description="Atualiza os Scripts e as bases de teste">

		<exec executable="/bin/sh" outputproperty ="pom.version" failonerror="true">
			<arg value="-c" />
			<arg value="grep -o -i -m 1 -E &quot;&lt;version&gt;.*&lt;\/version&gt;&quot; pom.xml | cut -d\&gt; -f2 | cut -d\&lt; -f1 | cut -d&quot;-&quot; -f1"/>
		</exec>

		<antcall target="-database-reload"/>
		<antcall target="-database-update"/>
		<antcall target="-database-export"/>

		<antcall target = "-database-script-save">
			<param name="release.thisversion" value="${pom.version}"/>
		</antcall>

		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="git add --all &amp;&amp; git commit -m '[${pom.version}]: Ajustes de bases de dados'" />
		</exec>

	</target>

	<target name="release-version-finish"
			description="Termina a geração de versão">

		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="mvn --batch-mode jgitflow:release-finish -Darguments=&quot;-Denvironment.type=production -DskipTests&quot;" />
		</exec>

	</target>


	<!-- ************************************************************* -->
	<target name="-database-reload" >
		<database-execute
				host ="${sql.host}"
				user ="${sql.user}"
				password ="${sql.password}"
				database ="${sql.dbname}"
				file ="${sql.data.path}"/>

		<database-execute
				host ="${sql.host}"
				user ="${sql.user}"
				password ="${sql.password}"
				database ="${sql.dbname}"
				file ="${sql.config.path}"/>
	</target>

	<target name="-database-update" >
		<database-execute
				host ="${sql.host}"
				user ="${sql.user}"
				password ="${sql.password}"
				database ="${sql.dbname}"
				file ="${sql.update.path}"/>
	</target>

	<target name="-database-export">
		<database-export
				host ="${sql.host}"
				user ="${sql.user}"
				password ="${sql.password}"
				database ="${sql.dbname}"
				file ="${sql.data.path}"
		/>
	</target>

	<!-- ************************************************************* -->


	<!-- Lança um servidor -->
	<target name="-create-environment" >
		<property name="createEnvironment.command" value="aws elasticbeanstalk create-environment
			--application-name &quot;${project.name}&quot;
			--version-label &quot;${application.versionLabel}&quot;
			--environment-name &quot;${environment.name}&quot;
			--description &quot;${environment.name}&quot;
			--cname-prefix &quot;${environment.cname}&quot;
			--template-name &quot;${environment.template}&quot;" />

		<echo>${createEnvironment.command}</echo>

		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="${createEnvironment.command}" />
		</exec>
	</target>

	<!-- atualiza um servidor -->
	<target name="-update-environment" >
		<exec executable="/bin/sh"  failonerror="true">
			<arg value="-c" />
			<arg value="aws elasticbeanstalk update-environment
			--version-label &quot;${application.versionLabel}&quot;
			--environment-name &quot;${environment.name}&quot;" />
		</exec>
	</target>

	<!-- Retorna o nome do servidor, caso este esteja ativo -->
	<target name="-check-environment">

		<!-- exibe a consulta para referencias -->
		<echo>"aws elasticbeanstalk describe-environments --application-name='${project.name}' | grep ${environment.name}"</echo>

		<exec executable="/bin/sh" outputproperty="server.color"  failonerror="true">
			<arg value="-c" />
			<arg value="aws elasticbeanstalk describe-environments
			--application-name='${project.name}'
			--output text
			| grep ${environment.name}
			| head -n 1
			| cut -f 16" />
		</exec>


		<echo>"COLOR - ${server.color}"</echo>

	</target>


	<!-- *************************************************************  -->

	<target name="-mvn-package" description="empacota a aplicacao">
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="mvn clean package -U -Denvironment.type=production" />
		</exec>
	</target>

	<target name="-multiwar-package">
		<delete dir="${multiwar.dir}" />
		<mkdir dir="${multiwar.dir}" />
		<mkdir dir="${multiwar.dir.war.dir}" />

		<antcall target="-project-copy"/>

		<for list="${multiwar.projects}" param="project">
			<sequential>
				<antcall target="-download-copy">
					<param name="project" value="@{project}"/>
				</antcall>
			</sequential>
		</for>

		<mkdir dir="${multiwar.dir.war.dir}/.ebextensions" />
		<copy todir="${multiwar.dir.war.dir}/.ebextensions">
			<fileset dir="src/main/webapp/.ebextensions" />
		</copy>
		<zip destfile="target/${project.name}-multiwar.zip" basedir="${multiwar.dir.war.dir}" />
	</target>

	<target name="-download-copy"
			description = "realiza as duas etapas, download e copy"	>

		<propertycopy property="mvn.version" from="${project}.version" />
		<propertycopy property="mvn.project" from="${project}.project" />
		<propertycopy property="mvn.warName" from="${project}.warName" />

		<antcall target="-maven-download"/>
		<antcall target="-maven-copy"/>
	</target>


	<target name="-project-copy" >
		<property name="mvn.project" value="${project.name}" />
		<property name="mvn.version" value="${project.version}" />
		<property name="mvn.warName" value="${project.warName}" />
		<property name="mvn.warPath" value="${project.warPath}" />

		<antcall target="-maven-copy"/>
	</target>

	<target name="-maven-download" >
		<echo>Baixando ${mvn.project} versao ${mvn.version} </echo>
		<exec executable="/bin/sh" failonerror="true">
			<arg value="-c" />
			<arg value="mvn  dependency:get
			-DgroupId=com.hivelog -DartifactId=${mvn.project}
			-Dversion=${mvn.version}
			-DremoteRepositories=${maven.repositories}
			-Dpackaging=war
			-Dtransitive=false" />
		</exec>
	</target>

	<target name="-maven-copy" >

		<property name="mvn.warPath" value="${application.repositoryPath}/${mvn.project}/${mvn.version}/${mvn.project}-${mvn.version}.war" />

		<echo>Copiando ${mvn.project} versao ${mvn.version}  caminho ${mvn.warPath} </echo>

		<copy tofile="${multiwar.dir.war.dir}/${mvn.warName}" file="${mvn.warPath}"  failonerror="true"/>
		<mkdir dir ="${multiwar.dir.war.dir}/tempJar"/>
		<mkdir dir ="tempWar"/>

		<exec executable="/bin/sh" failonerror="true" dir = "tempWar">
			<arg value="-c" />
			<arg value="jar -xf ../${multiwar.dir.war.dir}/${mvn.warName}" />
		</exec>
		<exec executable="/bin/sh" failonerror="true" dir = "tempWar">
			<arg value="-c" />
			<arg value="dir WEB-INF/lib/ > ../${multiwar.dir.war.dir}/tempJar/${mvn.project}-dep.txt" />
		</exec>
		<exec executable="/bin/sh" failonerror="true"  dir = "tempWar">
			<arg value="-c" />
			<arg value="mv -f WEB-INF/lib/* ../${multiwar.dir.war.dir}/tempJar/" />
		</exec>
		<delete dir="${multiwar.dir.war.dir}/${mvn.warName}"/>
		<exec executable="/bin/sh" failonerror="true"  dir = "tempWar">
			<arg value="-c" />
			<arg value="jar -cfM ../${multiwar.dir.war.dir}/${mvn.warName} *" />
		</exec>

		<delete dir="tempWar"/>

	</target>

	<!-- ************************************************************* -->

	<target name="-database-script-save" if = "release.thisversion">

		<delete dir="src/main/resources/database/${release.thisversion}"/>

		<mkdir dir="src/main/resources/database/${release.thisversion}" />

		<copy file="src/main/resources/database/admin-create-objects.sql"
			  tofile="src/main/resources/database/${release.thisversion}/admin-create-objects-${release.thisversion}.sql" force = "true"/>
		<copy file="src/main/resources/database/data-create-tables.sql"
			  tofile="src/main/resources/database/${release.thisversion}/data-create-tables-${release.thisversion}.sql" force = "true"/>
		<copy file="src/main/resources/database/update-data.sql"
			  tofile="src/main/resources/database/${release.thisversion}/update-data-${release.thisversion}.sql" force = "true"/>
		<truncate file = "src/main/resources/database/update-data.sql"/>


	</target>

	<!-- ************************************************************* -->

	<macrodef name="database-execute">
		<attribute name="host" />
		<attribute name="user" />
		<attribute name="password"/>
		<attribute name="database"/>
		<attribute name="file"/>
		<attribute name="action" default = "&lt;"/>
		<sequential>
			<local name = "database.execute"/>
			<property name="database.execute" value="mysql --force
			--host=@{host}
			--user=@{user}
			--password=@{password}
			@{database} @{action} @{file}"/>
			<echo>${database.execute}</echo>
			<exec executable="/bin/sh"  failonerror="true">
				<arg value="-c" />
				<arg value="${database.execute}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="database-export">
		<attribute name="host" />
		<attribute name="user" />
		<attribute name="password"/>
		<attribute name="database"/>
		<attribute name="file"/>
		<attribute name="action" default = "&gt;"/>
		<sequential>
			<local name = "database.execute"/>
			<property name="database.execute" value="mysqldump
	    	--column-statistics=0
			--host=@{host}
			--user=@{user}
			--password=@{password}
			@{database} @{action} @{file}"/>
			<echo>${database.execute}</echo>
			<exec executable="/bin/sh"  failonerror="true">
				<arg value="-c" />
				<arg value="${database.execute}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="create-application-version">
		<attribute name="localPath" />
		<attribute name="s3Name" />
		<attribute name="description"/>
		<attribute name="versionLabel"/>
		<attribute name="s3Path" default = "s3://${deploy.s3.bucket}/@{s3Name}"/>
		<attribute name="shorthand" default = "S3Bucket=${deploy.s3.bucket},S3Key=@{s3Name}"/>
		<sequential>

			<echo>Upload para o S3</echo>

			<exec executable="/bin/sh" failonerror="true">
				<arg value="-c" />
				<arg value="aws s3 cp @{localPath} @{s3Path}" />
			</exec>

			<local name = "createApplication.command"/>

			<property name="createApplication.command" value="aws elasticbeanstalk
			create-application-version
			--application-name &quot;${project.name}&quot;
			--description &quot;@{description}&quot;
			--version-label &quot;@{versionLabel}&quot;
			--source-bundle @{shorthand}"/>

			<echo>${createApplication.command}</echo>

			<exec executable="/bin/sh" failonerror="true">
				<arg value="-c" />
				<arg value="${createApplication.command}" />
			</exec>

		</sequential>
	</macrodef>

</project>


