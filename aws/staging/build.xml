<project name="hivelog-build" basedir="../../">
	<property environment="env"/>
	<!-- adiciona o ant-contrib, biblioteca que disponibiliza diversos comando adicionais ao ant -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"
			 classpath="${user.home}/.m2/repository/ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.jar"/>

	<loadproperties srcFile="aws/staging/project.properties" />


	<!-- Propriedades do Build runtime-->
	<property name="build.projeto" value="${env.PROJETO}"/>
	<property name="build.acao" value="${env.ACAO}"/>
	<property name="build.pastacompilado" value="${env.PASTACOMPILADO}"/>
	<property name="build.id" value="${env.CODEBUILD_BUILD_ID}"/>
	<property name="build.tstamp" value="${env.CODEBUILD_START_TIME}"/>

	<propertycopy property="sql.host" from="environment.${build.server}.db.host" />

	<exec executable="/bin/sh" outputproperty ="build.uuid">
		<arg value="-c" />
		<arg value="echo ${build.id} | cut -d: -f2" />
	</exec>


	<target name = "do-magic" description="metodo inicial">

		<echo>"env.PROJETO" ${env.PROJETO}</echo>
		<echo>"env.ACAO" ${env.ACAO}</echo>
		<echo>"env.CODEBUILD_BUILD_ID" ${env.CODEBUILD_BUILD_ID}</echo>
		<echo>"env.CODEBUILD_SOURCE_VERSION" ${env.CODEBUILD_SOURCE_VERSION}</echo>
		<echo>"env.CODEBUILD_START_TIME" ${env.CODEBUILD_START_TIME}</echo>
		<echo>"env.PASTAREAL" ${env.PASTAREAL}</echo>

	</target>

	<target name="deploy-app"
	description="A partir do nome do projeto, coloca o artefato compilado no elasticbeanstalk">

		<property name="deploy.folder" value="deployTemp"/>
		<property name="deploy.warpath" value="${deploy.folder}/${build.uuid}.war"/>
		<mkdir dir="${deploy.folder}" />
		<zip destfile="${deploy.warpath}" basedir="${build.pastacompilado}" />

		<property name="deploy.description" value="deploy automÃ¡tico para o staging"/>

		<create-application-version
				application.name="${build.projeto}"
				localPath="${deploy.warpath}"
				s3Name="${deploy.warpath}"
				description="${deploy.description}"
				versionLabel="${build.uuid}" />

	</target>

	<!-- Retorna o nome do servidor, caso este esteja ativo -->
	<target name="-check-environment">

		<!-- exibe a consulta para referencias -->
		<echo>"aws elasticbeanstalk describe-environments --application-name='${elb.application.name}' | grep ${environment.name}"</echo>

		<exec executable="/bin/sh" outputproperty="server.color"  failonerror="true">
			<arg value="-c" />
			<arg value="aws elasticbeanstalk describe-environments
			--application-name='${build.projeto}'
			--output text
			| grep ${environment.name}
			| head -n 1
			| cut -f 16" />
		</exec>


		<echo>"ON - ${server.on} COLOR - ${server.color}"</echo>

	</target>

	<macrodef name="create-application-version">
		<attribute name="application.name" />
		<attribute name="localPath" />
		<attribute name="s3Name" />
		<attribute name="description"/>
		<attribute name="versionLabel"/>
		<attribute name="s3.bucket" default="codebuild-app-deploy-hivecloud"/>
		<attribute name="s3Path" default = "s3://@{s3.bucket}/@{s3Name}"/>
		<attribute name="shorthand" default = "S3Bucket=@{s3.bucket},S3Key=@{s3Name}"/>
		<sequential>

			<echo>Upload para o S3</echo>

			<exec executable="/bin/sh" failonerror="true">
				<arg value="-c" />
				<arg value="aws s3 cp @{localPath} @{s3Path}" />
			</exec>

			<local name = "createApplication.command"/>

			<property name="createApplication.command" value="aws elasticbeanstalk
			create-application-version
			--application-name &quot;@{application.name}&quot;
			--description &quot;@{description}&quot;
			--version-label &quot;@{versionLabel}&quot;
			--source-bundle @{shorthand}"/>

			<echo>${createApplication.command}</echo>

			<exec executable="/bin/sh" failonerror="true">
				<arg value="-c" />
				<arg value="${createApplication.command}" />
			</exec>

		</sequential>
	</macrodef>


</project>


